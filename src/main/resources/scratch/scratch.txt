
    farmCategory("lunch", "https://www.zomato.com/sydney/lunch", None)
    farmCategory("breakfast", "https://www.zomato.com/sydney/breakfast", None)
    farmCategory("delivery", "https://www.zomato.com/sydney/delivery", None)
    farmCategory("take-away", "https://www.zomato.com/sydney/take-away", None)
    farmCategory("pubs-bars", "https://www.zomato.com/sydney/pubs-bars", None)
    farmCategory("asian", "https://www.zomato.com/sydney/restaurants/asian", None)
    farmCategory("italian", "https://www.zomato.com/sydney/restaurants/italian", None)
    farmCategory("french", "https://www.zomato.com/sydney/restaurants/french", None)
    farmCategory("japanese", "https://www.zomato.com/sydney/restaurants/japanese", None)
    farmCategory("chinese", "https://www.zomato.com/sydney/restaurants/chinese", None)
    farmCategory("desserts-bakes", "https://www.zomato.com/sydney/restaurants", Some("desserts-bakes=1"))
    farmCategory("bubble-tea", "https://www.zomato.com/sydney/restaurants/bubble-tea", None)


//  private def doGetPage(path: String, queryOpt: Option[String], pageNumber: Int): Option[JValue] = {
//    val pageParam = s"page=$pageNumber"
//    val queryStr = queryOpt.map(query => s"${query}&${pageParam}").getOrElse(pageParam)
//    val url = buildUrl(s"${path}?${queryStr}")
//    doGet(url)
//  }
//
//  private def doGetAllPages(path: String, query: Option[String]): Seq[JValue] = {
//    val firstPage = doGetPage(path, query , 1)
//    val totalPageCount = firstPage.flatMap(p => (p \ "pagination" \ "number_of_pages").extractOpt[Int]).getOrElse(0)
//    println(s"Fetching ${totalPageCount} pages for $path ${query.getOrElse("")}")
//
//    val remainderPages = (2 to totalPageCount).flatMap(pageNumber => doGetPage(path, query, pageNumber))
//    firstPage.toSeq ++ remainderPages
//  }